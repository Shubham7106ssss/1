name: Windows RDP via Tailscale (A)

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 360  # ~6h hard max on GitHub-hosted
    env:
      TS_AUTHKEY: "tskey-auth-k3hPLZv7pr11CNTRL-nbSsHPZ3EQTdMnUK8MLdPTuc9uWGQVvx"
      TS_API: "tskey-api-kau5CptpYW11CNTRL-znAxhkNKX85Kb69ezRYu75QEdeBCSZtqe"
      TS_HOST: "bullet"
      RDP_USER: "Bullettemporary"
      RDP_PASS: "Bullet@12345"
      # the counterpart workflow filename
      PARTNER_FILE: "rdp-bullet-B.yml"

    steps:
      - name: Install Tailscale (via choco)
        run: |
          choco install tailscale -y --no-progress
        shell: pwsh

      - name: Enable RDP + user + firewall
        run: |
          $ErrorActionPreference = 'Stop'
          $u  = "${env:RDP_USER}"
          $pw = ConvertTo-SecureString "${env:RDP_PASS}" -AsPlainText -Force

          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $pw -AccountNeverExpires
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
            Add-LocalGroupMember -Group "Administrators" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $pw -AccountNeverExpires
            Enable-LocalUser -Name $u
          }

          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
        shell: pwsh

      - name: Tailscale up (fixed hostname)
        run: |
          $ErrorActionPreference = 'Stop'
          $ts = "$env:ProgramFiles\Tailscale\tailscale.exe"

          # Bring device online as 'bullet'
          & $ts up --auth-key "${env:TS_AUTHKEY}" --hostname "${env:TS_HOST}" --unattended --accept-dns=true
          if ($LASTEXITCODE -ne 0) { throw "tailscale up failed" }

          # Show connection info
          $st = & $ts status --json | ConvertFrom-Json
          $self = $st.Self
          $ipv4 = ($self.Addresses | Where-Object { $_ -match '^\d{1,3}(\.\d{1,3}){3}$' })[0]
          $ipv6 = ($self.Addresses | Where-Object { $_ -match ':' })[0]

          Write-Host "================ RDP CONNECT ================"
          Write-Host ("MagicDNS : {0}" -f $self.DNSName)
          Write-Host ("IPv4     : {0}" -f $ipv4)
          Write-Host ("IPv6     : {0}" -f $ipv6)
          Write-Host ("mstsc    : mstsc /v:{0}" -f $self.DNSName)
          Write-Host ("Username : {0}" -f $env:RDP_USER)
          Write-Host ("Password : {0}" -f $env:RDP_PASS)
          Write-Host "============================================"

          # Save device ID for cleanup
          "$($self.ID)" | Out-File -FilePath $env:RUNNER_TEMP\ts_device_id.txt -Encoding ascii
        shell: pwsh

      - name: Keep alive (~5h 50m) & pre-dispatch partner (B)
        run: |
          $ErrorActionPreference = 'Stop'
          $until = (Get-Date).AddMinutes(350)   # ~5h50m
          $handoffAt = (Get-Date).AddMinutes(345) # 5 min earlier

          $dispatched = $false
          while ((Get-Date) -lt $until) {
            if (-not $dispatched -and (Get-Date) -gt $handoffAt) {
              # Dispatch partner workflow B using builtin GITHUB_TOKEN (no secrets needed)
              $repo = "${env:GITHUB_REPOSITORY}"
              $url  = "https://api.github.com/repos/$repo/actions/workflows/${env:PARTNER_FILE}/dispatches"
              $body = @{ ref = "${env:GITHUB_REF_NAME}" } | ConvertTo-Json
              Invoke-RestMethod -Method POST -Uri $url -Headers @{ Authorization = "Bearer $env:GITHUB_TOKEN"; "Accept"="application/vnd.github+json" } -Body $body
              Write-Host "Partner workflow (B) dispatched."
              $dispatched = $true
            }
            Start-Sleep -Seconds 15
          }
        shell: pwsh

      - name: Cleanup device from tailnet (delete this runner)
        if: always()
        run: |
          $ErrorActionPreference = 'SilentlyContinue'
          $ts = "$env:ProgramFiles\Tailscale\tailscale.exe"
          $id = Get-Content $env:RUNNER_TEMP\ts_device_id.txt -ErrorAction SilentlyContinue

          if (-not $id) {
            # Try to re-query
            $st = & $ts status --json | ConvertFrom-Json
            $id = $st.Self.ID
          }

          if ($id) {
            $hdr = @{ Authorization = "Bearer $env:TS_API"; "Accept"="application/json" }
            $url = "https://api.tailscale.com/api/v2/device/$id"
            try {
              Invoke-RestMethod -Method DELETE -Uri $url -Headers $hdr | Out-Null
              Write-Host "Deleted device $id from tailnet."
            } catch {
              Write-Host "Delete device $id failed or already gone."
            }
          }
        shell: pwsh
