name: Windows RDP via Tailscale (A)

on:
  workflow_dispatch:

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 360   # GH max ~6h

    steps:
      - name: Install Tailscale
        shell: pwsh
        run: |
          $msi = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi" -OutFile $msi
          Start-Process msiexec.exe -ArgumentList "/i `"$msi`" /qn" -Wait
          Remove-Item $msi -Force

      - name: Enable RDP + user + firewall
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $user='Bullettemporary'
          $pass='Bullet@12345'
          $sec = ConvertTo-SecureString $pass -AsPlainText -Force
          if (-not (Get-LocalUser -Name $user -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $user -Password $sec -AccountNeverExpires -PasswordNeverExpires:$true
            Add-LocalGroupMember -Group Administrators -Member $user
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $user
          } else {
            Set-LocalUser -Name $user -Password $sec -AccountNeverExpires:$true
            Enable-LocalUser -Name $user
          }
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null

      - name: Tailscale up (fixed hostname)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $ts = "${env:ProgramFiles}\Tailscale\tailscale.exe"
          if (-not (Test-Path $ts)) { throw "tailscale.exe not found" }

          $auth = "tskey-auth-k3hPLZv7pr11CNTRL-nbSsHPZ3EQTdMnUK8MLdPTuc9uWGQVvx"
          $name = "gha-rdp"   # <— SAME NAME in A & B to transfer identity/IP

          & $ts up --authkey="$auth" --hostname="$name"
          if ($LASTEXITCODE -ne 0) { throw "tailscale up failed" }

          $ip4 = (& $ts ip -4 | Select-Object -First 1)
          $ip6 = (& $ts ip -6 | Select-Object -First 1)
          Write-Host "================ RDP CONNECT ================="
          Write-Host ("MagicDNS : {0}" -f "$name")
          Write-Host ("IPv4     : {0}" -f $ip4)
          Write-Host ("IPv6     : {0}" -f $ip6)
          Write-Host ("mstsc    : mstsc /v:{0}" -f $name)
          Write-Host ("Username : {0}" -f 'Bullettemporary')
          Write-Host ("Password : {0}" -f 'Bullet@12345')
          Write-Host "=============================================="

      - name: Pre-dispatch B at T-5 (350 min)
        shell: pwsh
        run: |
          # Wait until 350 min (T-10) then dispatch B and keep A alive to 355 min (≈T-5 overlap)
          $dispatchAt = (Get-Date).AddMinutes(350)
          while ((Get-Date) -lt $dispatchAt) {
            Start-Sleep -Seconds 30
            Write-Host "RDP alive (A)…"
          }

          $token = "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"
          $repo  = $env:GITHUB_REPOSITORY
          $ref   = $env:GITHUB_REF_NAME; if (-not $ref) { $ref = "main" }
          $url   = "https://api.github.com/repos/$repo/actions/workflows/windows-rdp-tailscale-B.yml/dispatches"
          $hdrs  = @{
            "Authorization" = "token $token"
            "Accept"        = "application/vnd.github+json"
            "User-Agent"    = "rdp-tail-loop"
          }
          $body = @{ ref = $ref } | ConvertTo-Json
          Write-Host "Dispatching B on $repo @ $ref …"
          Invoke-RestMethod -Method Post -Uri $url -Headers $hdrs -Body $body

      - name: Keep A alive 5 more minutes for overlap
        shell: pwsh
        run: |
          $until = (Get-Date).AddMinutes(355)
          while ((Get-Date) -lt $until) {
            Start-Sleep -Seconds 30
            Write-Host "RDP alive (A – overlap)…"
          }
