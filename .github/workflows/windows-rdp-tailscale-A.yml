name: Windows RDP via Tailscale (A)

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: write

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 360   # runner limit ~6h

    env:
      TS_AUTHKEY: tskey-auth-kd7bFpSmfw11CNTRL-wTtb2mVxUsC8shs41Y1brCnM8NPrWp71
      TS_APIKEY:  tskey-api-kWjqKHRj9z11CNTRL-9MGhSXzSqWdnmUVzDMSGXdCD1xgxUoKQ
      TS_TAILNET: shubham.ind7106@gmail.com
      TS_HOST:    ram
      RDP_USER:   ramwin
      RDP_PASS:   Shubham@7106

    steps:
      - name: Install Tailscale (via choco)
        shell: pwsh
        run: |
          choco install tailscale -y --no-progress
          $env:PATH = "$env:ProgramFiles\Tailscale;$env:PATH"
          tailscale version

      - name: Enable RDP + user + firewall
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          # Enable RDP
          Set-ItemProperty "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name fDenyTSConnections -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop" | Out-Null
          # Create/refresh local user for RDP
          $u = "${env:RDP_USER}"
          $p = ConvertTo-SecureString "${env:RDP_PASS}" -AsPlainText -Force
          if (-not (Get-LocalUser -Name $u -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name $u -Password $p -AccountNeverExpires -PasswordNeverExpires:$true
            Add-LocalGroupMember -Group Administrators -Member $u
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member $u
          } else {
            Set-LocalUser -Name $u -Password $p -AccountNeverExpires:$true
            Enable-LocalUser -Name $u
          }

      - name: Purge ANY existing devices with hostname
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $tailnet = "${env:TS_TAILNET}"
          $apiKey  = "${env:TS_APIKEY}"
          $hdr = @{ Authorization = "Bearer $apiKey" }
          $tenc = [Uri]::EscapeDataString($tailnet)
          $hostname = "${env:TS_HOST}"
          function Get-MyDevices {
            $url = "https://api.tailscale.com/api/v2/tailnet/$tenc/devices?fields=all"
            $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri $url
            return $resp.devices | Where-Object {
              $_.hostname -eq $hostname -or
              $_.name     -eq $hostname -or
              ($_.dnsName -match "^$hostname\.")
            }
          }
          for ($try=1; $try -le 5; $try++) {
            $victims = Get-MyDevices
            if (-not $victims) { break }
            foreach ($d in $victims) {
              Write-Host "Deleting old device: $($d.id)  host=$($d.hostname)  dns=$($d.dnsName)"
              $delUrl = "https://api.tailscale.com/api/v2/device/$($d.id)"
              Invoke-RestMethod -Method DELETE -Headers $hdr -Uri $delUrl | Out-Null
              Start-Sleep -Milliseconds 500
            }
            Start-Sleep -Seconds 2
          }
          if (Get-MyDevices) { Write-Warning "Some devices still present." } else { Write-Host "All previous devices removed." }

      - name: Tailscale up (fixed hostname)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $env:PATH = "$env:ProgramFiles\Tailscale;$env:PATH"
          tailscale up --auth-key "${env:TS_AUTHKEY}" --hostname "${env:TS_HOST}" --accept-dns=true --unattended=true
          $ipv4 = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -match 'Tailscale' } | Select-Object -First 1).IPAddress

          Write-Host "================ RDP CONNECT ================"
          Write-Host "MagicDNS : ${env:TS_HOST}"
          Write-Host "IPv4     : $ipv4"
          Write-Host "mstsc    : mstsc /v:${env:TS_HOST}"
          Write-Host "Username : ${env:RDP_USER}"
          Write-Host "Password : ${env:RDP_PASS}"
          Write-Host "============================================"

      - name: Pre-dispatch partner (B) in background (t-5m)
        shell: pwsh
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          $parts = $env:GITHUB_REPOSITORY.Split('/')
          $owner,$repo = $parts[0],$parts[1]
          $workflowFile = 'windows-rdp-tailscale-B.yml'
          $seconds = 355*60 - 300  # (5h55m - 5m)
          Start-Job -ScriptBlock {
            param($o,$r,$wf,$tok,$sec)
            Start-Sleep -Seconds $sec
            $uri  = "https://api.github.com/repos/$o/$r/actions/workflows/$wf/dispatches"
            $body = @{ ref = $env:GITHUB_REF_NAME } | ConvertTo-Json
            Invoke-RestMethod -Method POST -Uri $uri -Headers @{ Authorization="Bearer $tok"; "Accept"="application/vnd.github+json"; "User-Agent"="gha" } -Body $body
            Write-Host "Partner workflow dispatched: $wf"
          } -ArgumentList $owner,$repo,$workflowFile,$env:GH_TOKEN,$seconds | Out-Null
          Write-Host "Background dispatcher armed."

      - name: Keep alive (~5h55m)
        shell: pwsh
        run: |
          $until = (Get-Date).AddMinutes(355)
          while ((Get-Date) -lt $until) {
            Write-Host "[$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')] RDP alive.."
            Start-Sleep 60
          }
